{"version":3,"sources":["utils/models/canvasElement.ts","utils/models/canvasWrapper.ts","utils/models/dragState.ts","utils/models/vector.ts","utils/mouseEventUtils.ts","components/canvas/Canvas.tsx","utils/hooks/useWindowSize.ts","assets/dog.png","assets/cat.png","utils/imageUtils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CanvasElement","canvasImageSource","center","_dragState","DragState","this","width","height","left","x","right","top","y","bottom","topLeft","Vector2D","edges","bottomLeft","topRight","bottomRight","point","isDragging","draggingOffset","subtract","undefined","CanvasWrapper","canvas","canvasElements","getContext","find","el","dragState","isBeingDragged","i","length","element","drawBorder","drawImage","Path2D","rect","context","fillStyle","fillRect","BORDER_WIDTH","clearRect","drawImages","getRelativeCursorPosition","event","xPos","pageX","currentTarget","offsetLeft","yPos","pageY","offsetTop","Canvas","props","canvasRef","useRef","onWindowResize","useState","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","initCanvasElements","image","resize","current","adjustCanvasSize","Math","floor","forEach","handleImageOverflow","render","debounceResize","useCallback","debounce","initCanvas","images","map","canvasWidth","canvasHeight","ref","onMouseDown","cursorPos","topMostClickedElement","containsPoint","setDragging","onMouseUp","elementBeingDragged","onMouseMove","Error","loadImage","src","Promise","resolve","reject","Image","IMAGE_URIS","Cat","Dog","App","setImages","getImages","a","all","uri","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qQAOaA,EAAb,WAoCE,WAAYC,EAAsCC,GAAmB,yBAnCrED,uBAmCoE,OAlCpEC,YAkCoE,OAL5DC,WAAwB,IAAIC,EAMlCC,KAAKJ,kBAAoBA,EACzBI,KAAKH,OAASA,EAtClB,uCAIE,WACE,OAAQG,KAAKJ,kBAAkBK,QALnC,kBAOE,WACE,OAAQD,KAAKJ,kBAAkBM,SARnC,iBAWE,WACE,MAAO,CACLC,KAAMH,KAAKH,OAAOO,EAAIJ,KAAKC,MAAQ,EACnCI,MAAOL,KAAKH,OAAOO,EAAIJ,KAAKC,MAAQ,EACpCK,IAAKN,KAAKH,OAAOU,EAAIP,KAAKE,OAAS,EACnCM,OAAQR,KAAKH,OAAOU,EAAIP,KAAKE,OAAS,KAhB5C,mBAqBE,WACE,MAAO,CACLO,QAAS,IAAIC,EAASV,KAAKW,MAAMR,KAAMH,KAAKW,MAAML,KAClDM,WAAY,IAAIF,EAASV,KAAKW,MAAMR,KAAMH,KAAKW,MAAMH,QACrDK,SAAU,IAAIH,EAASV,KAAKW,MAAMN,MAAOL,KAAKW,MAAML,KACpDQ,YAAa,IAAIJ,EAASV,KAAKW,MAAMN,MAAOL,KAAKW,MAAMH,WA1B7D,qBAgCE,WACE,OAAOR,KAAKF,aAjChB,2BA8CE,SAAqBiB,GACnB,OAAOA,EAAMX,GAAKJ,KAAKW,MAAMN,OAASU,EAAMX,GAAKJ,KAAKW,MAAMR,MAAQY,EAAMR,GAAKP,KAAKW,MAAML,KAAOS,EAAMR,GAAKP,KAAKW,MAAMH,SA/C3H,yBAmDE,SAAmBQ,EAAqBD,GACtC,IAAME,EAAiBF,EAAQA,EAAMG,SAASlB,KAAKH,aAAUsB,EAC7DnB,KAAKF,WAAa,IAAIC,EAAUiB,EAAYC,OArDhD,KCFaG,EAAb,WAaE,WAAYC,EAA2BC,GAAkC,yBAZzED,YAYwE,OAXxEC,oBAWwE,EACtEtB,KAAKqB,OAASA,EACdrB,KAAKsB,eAAiBA,EAf1B,yCAIE,WACE,OAAOtB,KAAKqB,OAAOE,WAAW,QALlC,+BASE,WACE,OAAOvB,KAAKsB,eAAeE,MAAK,SAACC,GAAD,OAAQA,EAAGC,UAAUC,oBAVzD,8BAkBE,SAAiB1B,EAAeC,GAC9BF,KAAKqB,OAAOpB,MAAQA,EACpBD,KAAKqB,OAAOnB,OAASA,IApBzB,wBAuBE,WAEE,IAAK,IAAI0B,EAAI5B,KAAKsB,eAAeO,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACxD,IAAME,EAAU9B,KAAKsB,eAAeM,GAChCE,EAAQJ,UAAUC,gBACpB3B,KAAK+B,WAAWD,GAElB9B,KAAKgC,UAAUF,MA9BrB,uBAkCE,SAAkBA,IACE,IAAIG,QACZC,KAAK,IAAK,EAAGJ,EAAQ7B,MAAO6B,EAAQ5B,QAC9CF,KAAKmC,QAAQH,UAAUF,EAAQlC,kBAAmBkC,EAAQnB,MAAMR,KAAM2B,EAAQnB,MAAML,IAAKwB,EAAQ7B,MAAO6B,EAAQ5B,UArCpH,wBAwCE,SAAmB4B,GAEjB9B,KAAKmC,QAAQC,UAAY,QACzBpC,KAAKmC,QAAQE,SACXP,EAAQnB,MAAMR,KAHK,EAInB2B,EAAQnB,MAAML,IAJK,EAKnBwB,EAAQ7B,MAAQqC,EAChBR,EAAQ5B,OAASoC,KA/CvB,oBAmDE,WACEtC,KAAKmC,QAAQI,UAAU,EAAG,EAAGvC,KAAKqB,OAAOpB,MAAOD,KAAKqB,OAAOnB,QAC5DF,KAAKwC,iBArDT,KCGazC,EAIX,aAAsF,IAA1E4B,EAAyE,wDAAxCV,EAAwC,uDAAN,KAAM,yBAH5EU,oBAG4E,OAF5EV,oBAE4E,EACnFjB,KAAK2B,eAAiBA,EACtB3B,KAAKiB,eAAiBA,GCVbP,EAAb,WAGE,WAAYN,EAAWG,GAAY,yBAFnCH,OAEkC,OADlCG,OACkC,EAChCP,KAAKI,EAAIA,EACTJ,KAAKO,EAAIA,EALb,4CAQE,SAASQ,GACP,OAAO,IAAIL,EAASV,KAAKI,EAAIW,EAAMX,EAAGJ,KAAKO,EAAIQ,EAAMR,KATzD,iBAYE,SAAIQ,GACF,OAAO,IAAIL,EAASV,KAAKI,EAAIW,EAAMX,EAAGJ,KAAKO,EAAIQ,EAAMR,OAbzD,KCIakC,EAA4B,SAACC,GACxC,IAAMC,EAAOD,EAAME,OAASF,EAAMG,cAAcC,YAAc,GACxDC,EAAOL,EAAMM,OAASN,EAAMG,cAAcI,WAAa,GAE7D,OADoB,IAAIvC,EAASiC,EAAMI,I,OCkG1BG,EAlGgC,SAACC,GAC9C,IAAMC,EAAYC,iBAA0B,MACtCC,ECRD,WAAyB,MAGMC,mBAAS,CAC3CtD,MAAO,EACPC,OAAQ,IALoB,mBAGvBsD,EAHuB,KAGXC,EAHW,KA4B9B,OApBAC,qBAAU,WAER,SAASC,IAEPF,EAAc,CACZxD,MAAO2D,OAAOC,WACd3D,OAAQ0D,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIH,EDpBgBS,GACjB5C,EAASgC,mBAETa,EAAqB,SAACC,GAC1B,IAAMtE,EAAS,IAAIa,EAASyD,EAAMlE,MAAQ,EAAGkE,EAAMjE,OAAS,GAC5D,OAAO,IAAIP,EAAcwE,EAAOtE,IAG5BuE,EAAS,WACb,GAAK/C,EAAOgD,QAAZ,CADmB,IAEXR,EAAeD,OAAfC,WACRxC,EAAOgD,QAAQC,iBAAiBT,EAAYU,KAAKC,MAAOX,EAAa,GAAM,IAC3ExC,EAAOgD,QAAQ/C,eAAemD,QAAQC,GACtCrD,EAAOgD,QAAQM,WAOXC,EAAiBC,sBACrBC,oBAAS,kBAAMV,MAAU,IACzB,IAGIW,EAAaF,uBAAY,WAC7BxD,EAAOgD,QAAU,IAAIjD,EAAcgC,EAAUiB,QAASlB,EAAM6B,OAAOC,IAAIf,MAEtE,CAACf,EAAM6B,SA6CJN,EAAsB,SAAC5C,GAC3B,GAAKT,EAAOgD,QAAZ,CACA,IAAMa,EAAc7D,EAAOgD,QAAQhD,OAAOpB,MACpCkF,EAAe9D,EAAOgD,QAAQhD,OAAOnB,OACvC4B,EAAQnB,MAAMR,KAAO,IAAG2B,EAAQjC,OAAOO,EAAI0B,EAAQ7B,MAAQ,GAC3D6B,EAAQnB,MAAMN,MAAQ6E,IAAapD,EAAQjC,OAAOO,EAAI8E,EAAcpD,EAAQ7B,MAAQ,GACpF6B,EAAQnB,MAAML,IAAM,IAAGwB,EAAQjC,OAAOU,EAAIuB,EAAQ5B,OAAS,GAC3D4B,EAAQnB,MAAMH,OAAS2E,IAAcrD,EAAQjC,OAAOU,EAAI4E,EAAerD,EAAQ5B,OAAS,KAa9F,OALAwD,qBAAU,kBAAMqB,MAAc,CAACA,IAG/BrB,qBAAU,kBAAMkB,IAAgB,CAACA,EAAgBtB,IAE1C,wBAAQ8B,IAAKhC,EAAWiC,YAxDX,SAAC3C,GACnB,GAAKrB,EAAOgD,QAAZ,CACA,IAAMiB,EAAY7C,EAA0BC,GAGtC6C,EAAwBlE,EAAOgD,QAAQ/C,eAAeE,MAAK,SAACC,GAAD,OAAQA,EAAG+D,cAAcF,MACtFC,GACFA,EAAsBE,aAAY,EAAMH,GAE1CjE,EAAOgD,QAAQM,WA+CwCe,UA5CvC,SAAChD,GACZrB,EAAOgD,UACRhD,EAAOgD,QAAQsB,qBAAqBtE,EAAOgD,QAAQsB,oBAAoBF,aAAY,GACvFpE,EAAOgD,QAAQM,WAyC8DiB,YAtC3D,SAAClD,GACnB,GAAKrB,EAAOgD,QAAZ,CACA,IAAMsB,EAAsBtE,EAAOgD,QAAQsB,oBAC3C,GAAKA,EAAL,CACA,IAAKA,EAAoBjE,UAAUT,eAAgB,MAAM4E,MAAM,sDAC/D,IAAMP,EAAY7C,EAA0BC,GAE5CiD,EAAoB9F,OAASyF,EAAUpE,SAASyE,EAAoBjE,UAAUT,gBAE9EyD,EAAoBiB,GAEpBtE,EAAOgD,QAAQM,eE/EJ,MAA0B,gCCA1B,MAA0B,gCCO5BmB,EAAY,SAACC,GACxB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAM/B,EAAQ,IAAIgC,MAClBhC,EAAMJ,iBAAiB,QAAQ,WAC7BkC,EAAQ9B,MAEVA,EAAMJ,iBAAiB,QAASmC,GAChC/B,EAAM4B,IAAMA,MCRVK,EAAa,CAACC,EAAKC,GAoBVC,MAlBf,WAAgB,IAAD,EACehD,qBADf,mBACNyB,EADM,KACEwB,EADF,KAGPC,EAAY5B,sBAAW,sBAAC,4BAAA6B,EAAA,sEACZV,QAAQW,IAAIP,EAAWnB,KAAI,SAAC2B,GAAD,OAASd,EAAUc,OADlC,OACtBhF,EADsB,OAE5B4E,EAAU5E,GAFkB,2CAG3B,IASH,OAPA8B,qBAAU,WACR+C,MACC,CAACA,IAKG,mCAAGzB,GAAU,cAAC,EAAD,CAAQA,OAAQA,OCTvB6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS3C,OACP,cAAC,IAAM4C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.37b9c9c4.chunk.js","sourcesContent":["import { DragState, Vector2D } from \".\";\n\n/**\n * A utility class to wrap element rendered in the canvas.\n * Manages internal state of the element - ie position, width, height etc\n */\n// As we are using dynamic getters, the process of updating positions and sizes dynamically is a lot easier.\nexport class CanvasElement {\n  canvasImageSource: CanvasImageSource;\n  center: Vector2D;\n\n  get width() {\n    return +this.canvasImageSource.width;\n  }\n  get height() {\n    return +this.canvasImageSource.height;\n  }\n\n  get edges() {\n    return {\n      left: this.center.x - this.width / 2,\n      right: this.center.x + this.width / 2,\n      top: this.center.y - this.height / 2,\n      bottom: this.center.y + this.height / 2,\n    };\n  }\n\n  // Not used currently but may come in handy when doing rotations etc\n  get corners() {\n    return {\n      topLeft: new Vector2D(this.edges.left, this.edges.top),\n      bottomLeft: new Vector2D(this.edges.left, this.edges.bottom),\n      topRight: new Vector2D(this.edges.right, this.edges.top),\n      bottomRight: new Vector2D(this.edges.right, this.edges.bottom),\n    };\n  }\n\n  // Maintains the drag state of the element, and provides useful offset information\n  private _dragState: DragState = new DragState();\n  get dragState(): DragState {\n    return this._dragState;\n  }\n\n  constructor(canvasImageSource: CanvasImageSource, center: Vector2D) {\n    this.canvasImageSource = canvasImageSource;\n    this.center = center;\n  }\n\n  /**\n   * Checks whether a provided point is within the CanvasElement bounds.\n   * @param {Vector2D} point\n   * @return {boolean} Whether point is within the CanvasElement\n   */\n  public containsPoint(point: Vector2D) {\n    return point.x <= this.edges.right && point.x >= this.edges.left && point.y >= this.edges.top && point.y <= this.edges.bottom;\n  }\n\n  /** Sets the dragState. Also calculates offset from CanvasElement center.  */\n  public setDragging(isDragging: boolean, point?: Vector2D) {\n    const draggingOffset = point ? point.subtract(this.center) : undefined;\n    this._dragState = new DragState(isDragging, draggingOffset);\n  }\n}\n","import { CanvasElement } from \".\";\n\n/**\n * A wrapper for the canvas to track the state of the canvas - including elements that are rendered within\n */\nexport class CanvasWrapper {\n  canvas: HTMLCanvasElement;\n  canvasElements: CanvasElement[];\n\n  get context() {\n    return this.canvas.getContext(\"2d\")!;\n  }\n\n  /** Returns CanvasElement being dragged, otherwise undefined if none   */\n  get elementBeingDragged() {\n    return this.canvasElements.find((el) => el.dragState.isBeingDragged);\n  }\n\n  constructor(canvas: HTMLCanvasElement, canvasElements: CanvasElement[]) {\n    this.canvas = canvas;\n    this.canvasElements = canvasElements;\n  }\n\n  adjustCanvasSize(width: number, height: number) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n\n  private drawImages() {\n    // Reversing order as to paint the last element first. This comes across more intuitively on the UI\n    for (let i = this.canvasElements.length - 1; i >= 0; i--) {\n      const element = this.canvasElements[i];\n      if (element.dragState.isBeingDragged) {\n        this.drawBorder(element);\n      }\n      this.drawImage(element);\n    }\n  }\n\n  private drawImage(element: CanvasElement) {\n    const imageRect = new Path2D();\n    imageRect.rect(510, 0, element.width, element.height);\n    this.context.drawImage(element.canvasImageSource, element.edges.left, element.edges.top, element.width, element.height);\n  }\n\n  private drawBorder(element: CanvasElement) {\n    const BORDER_WIDTH = 2;\n    this.context.fillStyle = \"green\";\n    this.context.fillRect(\n      element.edges.left - BORDER_WIDTH,\n      element.edges.top - BORDER_WIDTH,\n      element.width + BORDER_WIDTH * 2,\n      element.height + BORDER_WIDTH * 2\n    );\n  }\n\n  render() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.drawImages();\n  }\n}\n","// If other states are added we can look to extract shared state info into a superclass and have sub state types wit their respective supplementary information\n\nimport { Vector2D } from \".\";\n\n/**\n * Utility to keep supplementary information about the Drag State\n *\n */\nexport class DragState {\n  readonly isBeingDragged: boolean;\n  readonly draggingOffset: Vector2D | null;\n\n  constructor(isBeingDragged: boolean = false, draggingOffset: Vector2D | null = null) {\n    this.isBeingDragged = isBeingDragged;\n    this.draggingOffset = draggingOffset;\n  }\n}\n","/**\n * Wraps x and y coordinates into a single entity.\n * Utility methods for vector maths added as well.\n */\nexport class Vector2D {\n  x: number;\n  y: number;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  subtract(point: Vector2D) {\n    return new Vector2D(this.x - point.x, this.y - point.y);\n  }\n\n  add(point: Vector2D) {\n    return new Vector2D(this.x + point.x, this.y + point.y);\n  }\n}\n","import { Vector2D } from \"./models\";\n\n/**\n *\n * Get Vector2D cursor position relative to the currentTarget\n *\n * @param event MouseEvent Down or Up\n */\nexport const getRelativeCursorPosition = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n  const xPos = event.pageX - (event.currentTarget.offsetLeft || 0);\n  const yPos = event.pageY - (event.currentTarget.offsetTop || 0);\n  const relativePos = new Vector2D(xPos, yPos);\n  return relativePos;\n};\n","import { FunctionComponent, useCallback, useEffect, useRef } from \"react\";\nimport { useWindowSize } from \"../../utils/hooks/useWindowSize\";\nimport { debounce } from \"lodash\";\nimport \"./Canvas.scss\";\nimport { CanvasWrapper, CanvasElement, Vector2D } from \"../../utils/models\";\nimport { getRelativeCursorPosition } from \"../../utils/mouseEventUtils\";\n\nexport interface CanvasProps {\n  images: HTMLImageElement[];\n}\n\nconst Canvas: FunctionComponent<CanvasProps> = (props: CanvasProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null as any);\n  const onWindowResize = useWindowSize();\n  const canvas = useRef<CanvasWrapper>();\n\n  const initCanvasElements = (image: HTMLImageElement): CanvasElement => {\n    const center = new Vector2D(image.width / 2, image.height / 2);\n    return new CanvasElement(image, center);\n  };\n\n  const resize = () => {\n    if (!canvas.current) return;\n    const { innerWidth } = window;\n    canvas.current.adjustCanvasSize(innerWidth, Math.floor((innerWidth / 16) * 9));\n    canvas.current.canvasElements.forEach(handleImageOverflow);\n    canvas.current.render();\n  };\n\n  // Debounce limits the number of calls in a given time range. This may prevent unnecessary calls to the render method.\n  // Debounce needs to maintain its reference in memory. The eslint-disable allows us to maintain a reference where usually useCallbacks won't\n  // Could also rather look into limiting the canvas.render() method - ie Similar to setting a fixed framerate in games\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceResize = useCallback(\n    debounce(() => resize(), 20),\n    []\n  );\n\n  const initCanvas = useCallback(() => {\n    canvas.current = new CanvasWrapper(canvasRef.current, props.images.map(initCanvasElements));\n    (() => resize)();\n  }, [props.images]);\n\n  // --------------------\n  // --- Mouse Events ---\n  // --------------------\n\n  // Potential Improvement -\n  // Rather handle mouse event in parent or even root.\n  // Why? When mouse moves off canvas the image doesn't react to mouse events anymore.\n  const onMouseDown = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (!canvas.current) return;\n    const cursorPos = getRelativeCursorPosition(event);\n\n    // To manage z-index we can order canvas.current.canvasElements depending on some constraint\n    const topMostClickedElement = canvas.current.canvasElements.find((el) => el.containsPoint(cursorPos));\n    if (topMostClickedElement) {\n      topMostClickedElement.setDragging(true, cursorPos);\n    }\n    canvas.current.render();\n  };\n\n  const onMouseUp = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (!canvas.current) return;\n    if (canvas.current.elementBeingDragged) canvas.current.elementBeingDragged.setDragging(false);\n    canvas.current.render();\n  };\n\n  const onMouseMove = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (!canvas.current) return;\n    const elementBeingDragged = canvas.current.elementBeingDragged;\n    if (!elementBeingDragged) return;\n    if (!elementBeingDragged.dragState.draggingOffset) throw Error('Element being dragged without \"draggingOffset\" set');\n    const cursorPos = getRelativeCursorPosition(event);\n\n    elementBeingDragged.center = cursorPos.subtract(elementBeingDragged.dragState.draggingOffset);\n\n    handleImageOverflow(elementBeingDragged);\n\n    canvas.current.render();\n  };\n\n  /**\n   *  Prevents image from overflowing off the canvas edges.\n   *  Note - canvas.render() method must be called after.\n   */\n  const handleImageOverflow = (element: CanvasElement) => {\n    if (!canvas.current) return;\n    const canvasWidth = canvas.current.canvas.width;\n    const canvasHeight = canvas.current.canvas.height;\n    if (element.edges.left < 0) element.center.x = element.width / 2;\n    if (element.edges.right > canvasWidth) element.center.x = canvasWidth - element.width / 2;\n    if (element.edges.top < 0) element.center.y = element.height / 2;\n    if (element.edges.bottom > canvasHeight) element.center.y = canvasHeight - element.height / 2;\n  };\n\n  // --------------------\n  // --- Side Effects ---\n  // --------------------\n\n  // Init\n  useEffect(() => initCanvas(), [initCanvas]);\n\n  // Window Resize Handler\n  useEffect(() => debounceResize, [debounceResize, onWindowResize]);\n\n  return <canvas ref={canvasRef} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseMove={onMouseMove}></canvas>;\n};\n\nexport default Canvas;\n","// Hook from https://usehooks.com/useWindowSize/\n\nimport { useState, useEffect } from \"react\";\n\n// Hook\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","export default __webpack_public_path__ + \"static/media/dog.1457c39d.png\";","export default __webpack_public_path__ + \"static/media/cat.2cabeee5.png\";","/**\n *\n * Returns a HTMLImageElement from a URI\n *\n * @param src string uri of image - local disk or Web URL\n * @returns {HTMLImageElement} HTMLImageElement\n */\nexport const loadImage = (src: string): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => {\n      resolve(image);\n    });\n    image.addEventListener(\"error\", reject);\n    image.src = src;\n  });\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Canvas from \"./components/canvas/Canvas\";\nimport Dog from \"./assets/dog.png\";\nimport Cat from \"./assets/cat.png\";\nimport { loadImage } from \"./utils/imageUtils\";\n\nconst IMAGE_URIS = [Cat, Dog];\n\nfunction App() {\n  const [images, setImages] = useState<HTMLImageElement[]>();\n\n  const getImages = useCallback(async () => {\n    const i = await Promise.all(IMAGE_URIS.map((uri) => loadImage(uri)));\n    setImages(i);\n  }, []);\n\n  useEffect(() => {\n    getImages();\n  }, [getImages]);\n\n  // Potential Cool Idea -\n  // Rather than have an images prop, let <Canvas /> accept children.\n  // Convert the children into Canvas Renderable data - eg CanvasImageSource\n  return <>{images && <Canvas images={images} />}</>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}